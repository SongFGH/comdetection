#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Worker:
  """
  Attributes:
   - ipAddr
   - port
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ipAddr', None, None, ), # 1
    (2, TType.I16, 'port', None, None, ), # 2
  )

  def __init__(self, ipAddr=None, port=None,):
    self.ipAddr = ipAddr
    self.port = port

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ipAddr = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.port = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Worker')
    if self.ipAddr is not None:
      oprot.writeFieldBegin('ipAddr', TType.STRING, 1)
      oprot.writeString(self.ipAddr)
      oprot.writeFieldEnd()
    if self.port is not None:
      oprot.writeFieldBegin('port', TType.I16, 2)
      oprot.writeI16(self.port)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkStatus:
  """
  Attributes:
   - worker
   - totalTime
   - totalIds
   - recentTime
   - recentIds
   - jobQueueID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'worker', (Worker, Worker.thrift_spec), None, ), # 1
    (2, TType.I32, 'totalTime', None, None, ), # 2
    (3, TType.I32, 'totalIds', None, None, ), # 3
    (4, TType.I32, 'recentTime', None, None, ), # 4
    (5, TType.I32, 'recentIds', None, None, ), # 5
    (6, TType.I16, 'jobQueueID', None, None, ), # 6
  )

  def __init__(self, worker=None, totalTime=None, totalIds=None, recentTime=None, recentIds=None, jobQueueID=None,):
    self.worker = worker
    self.totalTime = totalTime
    self.totalIds = totalIds
    self.recentTime = recentTime
    self.recentIds = recentIds
    self.jobQueueID = jobQueueID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.worker = Worker()
          self.worker.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.totalTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.totalIds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.recentTime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.recentIds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.jobQueueID = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkStatus')
    if self.worker is not None:
      oprot.writeFieldBegin('worker', TType.STRUCT, 1)
      self.worker.write(oprot)
      oprot.writeFieldEnd()
    if self.totalTime is not None:
      oprot.writeFieldBegin('totalTime', TType.I32, 2)
      oprot.writeI32(self.totalTime)
      oprot.writeFieldEnd()
    if self.totalIds is not None:
      oprot.writeFieldBegin('totalIds', TType.I32, 3)
      oprot.writeI32(self.totalIds)
      oprot.writeFieldEnd()
    if self.recentTime is not None:
      oprot.writeFieldBegin('recentTime', TType.I32, 4)
      oprot.writeI32(self.recentTime)
      oprot.writeFieldEnd()
    if self.recentIds is not None:
      oprot.writeFieldBegin('recentIds', TType.I32, 5)
      oprot.writeI32(self.recentIds)
      oprot.writeFieldEnd()
    if self.jobQueueID is not None:
      oprot.writeFieldBegin('jobQueueID', TType.I16, 6)
      oprot.writeI16(self.jobQueueID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
